-- 1. What are the standard ingredients for each pizza?
SELECT
pr.pizza_id , pt.topping_name
FROM pizza_recipes pr
JOIN unnest(string_to_array(pr.toppings, ',')) AS topping_id_str ON true
JOIN pizza_toppings pt
ON pt.topping_id = topping_id_str:: INT
ORDER BY pr.pizza_id;


-- 2. What was the most commonly added extra?
WITH extras_count AS (
  SELECT
pt.topping_name,
COUNT (*) AS extras_count,
  RANK () OVER (ORDER BY COUNT (*) DESC) AS rank
FROM customer_orders co
JOIN unnest(string_to_array(co.extras, ',')) AS extras_id_str ON true
JOIN pizza_toppings pt 
ON pt.topping_id = extras_id_str:: INT
WHERE co.extras IS NOT NULL AND co.extras <> 'null'
GROUP BY pt.topping_name
)
SELECT 
topping_name , extras_count
FROM extras_count
WHERE rank = 1;


-- 3. What was the most common exclusion?
WITH exclusions_count AS (
  SELECT
pt.topping_name,
COUNT (*) AS exclusions_count,
  RANK () OVER (ORDER BY COUNT (*) DESC) AS rank
FROM customer_orders co
JOIN unnest(string_to_array(co.exclusions, ',')) AS exclusions_id_str ON true
JOIN pizza_toppings pt 
ON pt.topping_id = exclusions_id_str:: INT
WHERE co.exclusions IS NOT NULL AND co.exclusions <> 'null'
GROUP BY pt.topping_name
)
SELECT 
topping_name , exclusions_count
FROM exclusions_count
WHERE rank = 1;


-- 4. Generate an order item for each record in the customers_orders table in the format of the following: Meat Lovers - Exclude Cheese, Bacon - Extra Mushroom, Peppers
WITH exclusions AS (
  SELECT
    co.order_id, pt.topping_name AS exclusion_name
  FROM customer_orders co
  JOIN unnest(string_to_array(co.exclusions, ',')) AS exclusions_id_str ON true
  JOIN pizza_toppings pt 
    ON pt.topping_id = exclusions_id_str::INT
  WHERE co.exclusions IS NOT NULL AND co.exclusions <> 'null'
),
extras AS (
  SELECT co.order_id , pt.topping_name AS extra_name
  FROM customer_orders co 
  JOIN unnest(string_to_array(co.extras, ',')) AS extras_id_str ON true
  JOIN pizza_toppings pt
    ON pt.topping_id = extras_id_str::INT 
  WHERE co.extras IS NOT NULL AND co.extras <> 'null'
)
SELECT 
  co.order_id, 
  pn.pizza_name, 
  excs.exclusion_list,
  exts.extra_list,
  pn.pizza_name
  || COALESCE(' - Exclude ' || excs.exclusion_list, '')
  || COALESCE(' - Extra ' || exts.extra_list, '') AS order_item
FROM customer_orders co 
JOIN pizza_names pn ON co.pizza_id = pn.pizza_id
LEFT JOIN (
  SELECT order_id, STRING_AGG(DISTINCT exclusion_name, ', ') AS exclusion_list
  FROM exclusions
  GROUP BY order_id
) excs ON co.order_id = excs.order_id
LEFT JOIN (
  SELECT order_id, STRING_AGG(DISTINCT extra_name, ', ') AS extra_list
  FROM extras
  GROUP BY order_id
) exts ON co.order_id = exts.order_id;


-- 5. Generate an alphabetically ordered comma separated ingredient list for each pizza order from the customer_orders table and add a 2x in front of any relevant ingredients.
WITH base_toppings AS(
SELECT 
c.order_id,
c.pizza_id,
pt.topping_name 
FROM customer_orders c
JOIN pizza_recipes pr ON c.pizza_id = pr.pizza_id
JOIN unnest(string_to_array(pr.toppings, ',')) AS t(topping_id_str) ON true
JOIN pizza_toppings pt ON pt.topping_id = topping_id_str:: INT
),
extra_toppings AS(
SELECT
c.order_id,
c.pizza_id,
pt.topping_name
FROM customer_orders c
JOIN unnest(string_to_array(c.extras, ',')) AS e(extra_id_str) ON TRUE
JOIN pizza_toppings pt ON pt.topping_id = extra_id_str::INT
WHERE c.extras IS NOT NULL AND c.extras <> 'null'
),
exclusion_toppings AS(
SELECT
co.order_id,co.pizza_id, pt.topping_name
FROM customer_orders co
JOIN unnest(string_to_array(co.exclusions, ',')) AS exclusions_id_str ON true
JOIN pizza_toppings pt 
ON pt.topping_id = exclusions_id_str::INT
WHERE co.exclusions IS NOT NULL AND co.exclusions <> 'null'
),
all_toppings AS (
SELECT order_id, pizza_id, topping_name
FROM base_toppings
UNION ALL 
SELECT order_id, pizza_id, topping_name
FROM extra_toppings
),
final_toppings AS (
SELECT 
at.order_id, at.pizza_id, at.topping_name
FROM all_toppings at
LEFT JOIN exclusion_toppings et
ON at.order_id = et.order_id AND at.pizza_id = et.pizza_id AND at.topping_name = et.topping_name
WHERE et.topping_name IS NULL OR et.topping_name = 'null'
),
topping_counts AS(
SELECT order_id, pizza_id, topping_name, COUNT(topping_name) AS topping_count
FROM final_toppings
GROUP BY order_id, pizza_id, topping_name
),
formatted_toppings AS (
SELECT
order_id,
pizza_id,
topping_name,
CASE 
  WHEN topping_count > 1 THEN topping_count || 'x' || topping_name
  ELSE topping_name
  END AS topping_display
FROM topping_counts
)
SELECT 
c.order_id, pn.pizza_name || ': ' ||
STRING_AGG(DISTINCT ft.topping_display, ', ') AS ingredient_list
FROM customer_orders c
JOIN pizza_names pn ON c.pizza_id = pn.pizza_id
JOIN formatted_toppings ft ON c.order_id = ft.order_id AND c.pizza_id = ft.pizza_id
GROUP BY c.order_id, pn.pizza_name
ORDER BY c.order_id;


-- 6. What is the total quantity of each ingredient used in all delivered pizzas sorted by most frequent first?
WITH basic_toppings AS(
SELECT c.order_id,c.pizza_id,pt.topping_name
FROM customer_orders c
JOIN pizza_recipes pr ON c.pizza_id = pr.pizza_id
JOIN unnest(string_to_array(pr.toppings, ',')) AS t(topping_id_str) ON true
JOIN pizza_toppings pt ON pt.topping_id = topping_id_str:: INT
),
extra_toppings AS(
SELECT
c.order_id,c.pizza_id,pt.topping_name
FROM customer_orders c
JOIN unnest(string_to_array(c.extras, ',')) AS e(extra_id_str) ON TRUE
JOIN pizza_toppings pt ON pt.topping_id = extra_id_str::INT
WHERE c.extras IS NOT NULL AND c.extras <> 'null'
),
exclusion_toppings AS(
SELECT
co.order_id,co.pizza_id, pt.topping_name
FROM customer_orders co
JOIN unnest(string_to_array(co.exclusions, ',')) AS exclusions_id_str ON true
JOIN pizza_toppings pt 
ON pt.topping_id = exclusions_id_str::INT
WHERE co.exclusions IS NOT NULL AND co.exclusions <> 'null'
),
all_toppings AS (
SELECT order_id,pizza_id,topping_name FROM basic_toppings
UNION ALL
SELECT order_id,pizza_id,topping_name FROM extra_toppings
),
final_toppings AS(
SELECT at.order_id,at.pizza_id, at.topping_name
FROM all_toppings at 
LEFT JOIN exclusion_toppings et
ON at.order_id = et.order_id AND at.pizza_id = et.pizza_id AND at.topping_name = et.topping_name
WHERE et.topping_name IS NULL OR et.topping_name = 'null'
)
SELECT ft.topping_name,COUNT(ft.topping_name)
FROM final_toppings ft
JOIN runner_orders ro 
ON ft.order_id = ro.order_id 
WHERE ro.distance IS NOT NULL OR ro.distance <> 'null'
GROUP BY ft.topping_name
ORDER BY COUNT(ft.topping_name) DESC;
